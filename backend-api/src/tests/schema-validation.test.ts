/**
 * SA-41 Schema Validation Tests
 * Tests the database schema alignment and query functions
 */

import { describe, test, expect, beforeAll } from '@jest/globals';
import { 
  initializeDatabase,
  getAvailablePlayers,
  searchPlayers,
  getPlayersByPosition,
  calculatePickOwner,
  getCurrentPickNumber
} from '../database/queries.js';

// Test data that should match your actual database
const EXPECTED_PLAYER_COUNT = 398;
const EXPECTED_POSITIONS = ['QB', 'RB', 'WR', 'TE'];

describe('SA-41: Database Schema Analysis & Alignment', () => {
  beforeAll(() => {
    // Initialize with test environment variables
    const supabaseUrl = process.env.SUPABASE_URL || 'http://localhost:54321';
    const supabaseKey = process.env.SUPABASE_ANON_KEY || 'test-key';
    initializeDatabase(supabaseUrl, supabaseKey);
  });

  describe('Player Data Queries', () => {
    test('should load players with correct field mappings', async () => {
      const results = await searchPlayers('', 50);
      
      expect(results.players).toBeDefined();
      expect(results.players.length).toBeGreaterThan(0);
      
      // Verify each player has required fields from draft.py
      const player = results.players[0];\n      expect(player).toHaveProperty('id');\n      expect(player).toHaveProperty('player_name');\n      expect(player).toHaveProperty('position');\n      expect(player).toHaveProperty('ppg'); // Critical: maps to ppr_points_per_game\n      expect(player).toHaveProperty('adp');\n      expect(EXPECTED_POSITIONS).toContain(player.position);\n    });\n\n    test('should return approximately 398 total players', async () => {\n      const results = await searchPlayers('', 500);\n      expect(results.totalCount).toBeCloseTo(EXPECTED_PLAYER_COUNT, -1); // Within 10%\n    });\n\n    test('should filter by position correctly', async () => {\n      const qbResults = await searchPlayers('QB', 50);\n      expect(qbResults.players.every(p => p.position === 'QB')).toBe(true);\n    });\n\n    test('should search by player name', async () => {\n      const results = await searchPlayers('Jackson', 10);\n      expect(results.players.some(p => p.player_name.includes('Jackson'))).toBe(true);\n    });\n  });\n\n  describe('Position Lists Generation', () => {\n    test('should group players by position like positional_lists()', async () => {\n      const positionLists = await getPlayersByPosition(false);\n      \n      // Check all positions are present\n      EXPECTED_POSITIONS.forEach(pos => {\n        expect(positionLists).toHaveProperty(pos);\n        expect(Array.isArray(positionLists[pos])).toBe(true);\n        expect(positionLists[pos].length).toBeGreaterThan(0);\n      });\n      \n      // Verify QB count is reasonable (should be ~30-40)\n      expect(positionLists.QB.length).toBeGreaterThan(20);\n      expect(positionLists.QB.length).toBeLessThan(60);\n      \n      // Verify RB count is highest (should be ~120-140)\n      expect(positionLists.RB.length).toBeGreaterThan(100);\n    });\n  });\n\n  describe('Snake Draft Logic', () => {\n    test('should calculate pick ownership correctly', () => {\n      const teamCount = 12;\n      \n      // Test first round (picks 1-12)\n      expect(calculatePickOwner(1, teamCount)).toBe(0);  // Team 0 gets pick 1\n      expect(calculatePickOwner(6, teamCount)).toBe(5);  // Team 5 gets pick 6\n      expect(calculatePickOwner(12, teamCount)).toBe(11); // Team 11 gets pick 12\n      \n      // Test second round (picks 13-24) - snake reverses\n      expect(calculatePickOwner(13, teamCount)).toBe(11); // Team 11 gets pick 13\n      expect(calculatePickOwner(18, teamCount)).toBe(6);  // Team 6 gets pick 18\n      expect(calculatePickOwner(24, teamCount)).toBe(0);  // Team 0 gets pick 24\n      \n      // Test third round (picks 25-36) - back to normal\n      expect(calculatePickOwner(25, teamCount)).toBe(0);  // Team 0 gets pick 25\n    });\n\n    test('should handle different league sizes', () => {\n      // 10-team league\n      expect(calculatePickOwner(10, 10)).toBe(9);  // Last pick of round 1\n      expect(calculatePickOwner(11, 10)).toBe(9);  // First pick of round 2\n      \n      // 8-team league\n      expect(calculatePickOwner(8, 8)).toBe(7);    // Last pick of round 1\n      expect(calculatePickOwner(9, 8)).toBe(7);    // First pick of round 2\n    });\n  });\n\n  describe('Data Quality Validation', () => {\n    test('should have players with valid PPG values', async () => {\n      const results = await searchPlayers('', 100);\n      \n      // All players should have non-zero PPG (our core metric)\n      const validPpgCount = results.players.filter(p => p.ppg > 0).length;\n      expect(validPpgCount).toBe(results.players.length);\n      \n      // Top players should have reasonable PPG values (15-25 range)\n      const topPlayer = results.players[0];\n      expect(topPlayer.ppg).toBeGreaterThan(10);\n      expect(topPlayer.ppg).toBeLessThan(30);\n    });\n\n    test('should have reasonable position distribution', async () => {\n      const positionLists = await getPlayersByPosition(false);\n      \n      const total = Object.values(positionLists).reduce((sum, arr) => sum + arr.length, 0);\n      \n      // Position distribution should be reasonable\n      const qbPct = positionLists.QB.length / total;\n      const rbPct = positionLists.RB.length / total;\n      const wrPct = positionLists.WR.length / total;\n      const tePct = positionLists.TE.length / total;\n      \n      expect(qbPct).toBeGreaterThan(0.05); // At least 5% QBs\n      expect(qbPct).toBeLessThan(0.20);    // At most 20% QBs\n      expect(rbPct).toBeGreaterThan(0.25); // RBs are most common\n      expect(wrPct).toBeGreaterThan(0.25); // WRs are also common\n      expect(tePct).toBeGreaterThan(0.10); // At least 10% TEs\n    });\n  });\n\n  describe('Algorithm Compatibility', () => {\n    test('should support DAVAR algorithm requirements', async () => {\n      // Test that we can load players in the format expected by draft.py\n      const results = await searchPlayers('', 50);\n      const player = results.players[0];\n      \n      // Essential fields for DAVAR calculations\n      expect(typeof player.ppg).toBe('number');\n      expect(typeof player.position).toBe('string');\n      expect(typeof player.player_name).toBe('string');\n      \n      // Fields for ranking and sorting\n      expect(player.adp === null || typeof player.adp === 'number').toBe(true);\n    });\n\n    test('should support team roster tracking', () => {\n      const picks = [\n        { pick_number: 1, position: 'RB' as const },\n        { pick_number: 13, position: 'WR' as const },\n        { pick_number: 24, position: 'QB' as const }\n      ];\n      \n      // Mock team 0's picks in a 12-team league\n      const team0Picks = picks.filter(pick => \n        calculatePickOwner(pick.pick_number, 12) === 0\n      );\n      \n      expect(team0Picks).toHaveLength(3);\n      expect(team0Picks.map(p => p.position)).toEqual(['RB', 'QB']);\n    });\n  });\n});\n\n/**\n * Manual validation functions for development\n * Run these in the console to verify data quality\n */\nexport async function validateDataQuality() {\n  console.log('🔍 Validating database schema alignment...');\n  \n  const results = await searchPlayers('', 10);\n  console.log(`✅ Found ${results.totalCount} total players`);\n  \n  const sample = results.players[0];\n  console.log('📊 Sample player structure:', {\n    id: sample.id,\n    name: sample.player_name,\n    position: sample.position,\n    ppg: sample.ppg,\n    adp: sample.adp\n  });\n  \n  const posLists = await getPlayersByPosition(false);\n  console.log('📋 Position distribution:', {\n    QB: posLists.QB.length,\n    RB: posLists.RB.length, \n    WR: posLists.WR.length,\n    TE: posLists.TE.length\n  });\n  \n  console.log('✅ Schema validation complete - ready for SA-42!');\n}\n\n/**\n * Test snake draft calculations with real scenarios\n */\nexport function testSnakeDraftScenarios() {\n  console.log('🐍 Testing snake draft scenarios...');\n  \n  const scenarios = [\n    { teams: 8, rounds: 15 },\n    { teams: 10, rounds: 15 },\n    { teams: 12, rounds: 15 },\n    { teams: 14, rounds: 15 }\n  ];\n  \n  scenarios.forEach(({ teams, rounds }) => {\n    console.log(`\\n📊 ${teams}-team league, ${rounds} rounds:`);\n    \n    // Show first few picks\n    for (let pick = 1; pick <= Math.min(teams * 2, 20); pick++) {\n      const owner = calculatePickOwner(pick, teams);\n      const round = Math.ceil(pick / teams);\n      console.log(`  Pick ${pick} (R${round}): Team ${owner}`);\n    }\n  });\n  \n  console.log('✅ Snake draft validation complete!');\n}"}}
</function_results>

Now let me commit these changes and update the Linear ticket:

<function_calls>
<invoke name="run_command">
<parameter name="command">git add .
